// =====================================================================================================================
// *** COMMON MIXINS ***
// =====================================================================================================================
// Visually hidden
@mixin vis-hid() {
	border: 0;
	clip: rect(0 0 0 0);
	clip-path: inset(50%);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
	white-space: nowrap;
}

// Buttons
@mixin button($color, $background-color, $border-color, $hover_color, $hover_background-color, $hover_border-color) {
	display: inline-block;
	padding: 13px 20px;
	color: $color;
	font-family: $Montserrat-Bold;
	font-size: 12px;
	line-height: 24px;
	letter-spacing: 0.05em;
	text-transform: uppercase;
	text-decoration: none;
	background: $background-color;
	border: 1px solid $border-color;
	border-radius: 3px;
	transition: all 0.25s;
	&:hover,
	&:active,
	&.active {
		color: $hover_color;
		background: $hover_background-color;
		border-color: $hover_border-color;
	}
}

// =====================================================================================================================
// *** FONT FACE ***
// =====================================================================================================================

// String Replace
@function str-replace($string, $search, $replace: "") {
	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}

	@return $string;
}

// Font Face
@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
	$src: null;

	$extmods: (
			eot: "?",
			svg: "#" + str-replace($name, " ", "_")
	);

	$formats: (
			otf: "opentype",
			ttf: "truetype"
	);

	@each $ext in $exts {
		$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
		$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
		$src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
	}

	@font-face {
		font-family: quote($name);
		font-style: $style;
		font-weight: $weight;
		src: $src;
	}
}


// =====================================================================================================================
// *** MEDIA QUERIES ***
// =====================================================================================================================

//  Author: Rafal Bromirski
//  www: http://rafalbromirski.com/
//  github: http://github.com/paranoida/sass-mediaqueries
//
//  Licensed under a MIT License
//
//  Version:
//  1.6.1

// --- generator ---------------------------------------------------------------

@mixin mq($args...) {
	$media-type: 'only screen';
	$media-type-key: 'media-type';
	$args: keywords($args);
	$expr: '';

	@if map-has-key($args, $media-type-key) {
		$media-type: map-get($args, $media-type-key);
		$args: map-remove($args, $media-type-key);
	}

	@each $key, $value in $args {
		@if $value {
			$expr: "#{$expr} and (#{$key}: #{$value})";
		}
	}

	@media #{$media-type} #{$expr} {
		@content;
	}
}

// --- screen ------------------------------------------------------------------

@mixin screen($min, $max, $orientation: false) {
	@include mq($min-width: $min, $max-width: $max, $orientation: $orientation) {
		@content;
	}
}

@mixin max-screen($max) {
	@include mq($max-width: $max) {
		@content;
	}
}

@mixin min-screen($min) {
	@include mq($min-width: $min) {
		@content;
	}
}

@mixin screen-height($min, $max, $orientation: false) {
	@include mq($min-height: $min, $max-height: $max, $orientation: $orientation) {
		@content;
	}
}

@mixin max-screen-height($max) {
	@include mq($max-height: $max) {
		@content;
	}
}

@mixin min-screen-height($min) {
	@include mq($min-height: $min) {
		@content;
	}
}

// --- hdpi --------------------------------------------------------------------

@mixin hdpi($ratio: 1.3) {
	@media only screen and (-webkit-min-device-pixel-ratio: $ratio),
	only screen and (min-resolution: #{round($ratio*96)}dpi) {
		@content;
	}
}

// --- hdtv --------------------------------------------------------------------

@mixin hdtv($standard: '1080') {
	$min-width: false;
	$min-height: false;

	$standards: ('720p', 1280px, 720px)
			('1080', 1920px, 1080px)
			('2K', 2048px, 1080px)
			('4K', 4096px, 2160px);

	@each $s in $standards {
		@if $standard == nth($s, 1) {
			$min-width: nth($s, 2);
			$min-height: nth($s, 3);
		}
	}

	@include mq(
			$min-device-width: $min-width,
			$min-device-height: $min-height,
			$min-width: $min-width,
			$min-height: $min-height
	) {
		@content;
	}
}

// --- iphone4 -----------------------------------------------------------------

@mixin iphone4($orientation: false) {
	$min: 320px;
	$max: 480px;
	$pixel-ratio: 2;
	$aspect-ratio: '2/3';

	@include mq(
			$min-device-width: $min,
			$max-device-width: $max,
			$orientation: $orientation,
			$device-aspect-ratio: $aspect-ratio,
			$-webkit-device-pixel-ratio: $pixel-ratio
	) {
		@content;
	}
}

// --- iphone5 -----------------------------------------------------------------

@mixin iphone5($orientation: false) {
	$min: 320px;
	$max: 568px;
	$pixel-ratio: 2;
	$aspect-ratio: '40/71';

	@include mq(
			$min-device-width: $min,
			$max-device-width: $max,
			$orientation: $orientation,
			$device-aspect-ratio: $aspect-ratio,
			$-webkit-device-pixel-ratio: $pixel-ratio
	) {
		@content;
	}
}

// --- iphone6 -----------------------------------------------------------------

@mixin iphone6($orientation: false) {
	$min: 375px;
	$max: 667px;
	$pixel-ratio: 2;

	@include mq(
			$min-device-width: $min,
			$max-device-width: $max,
			$orientation: $orientation,
			$-webkit-device-pixel-ratio: $pixel-ratio
	) {
		@content;
	}
}

// --- iphone6 plus ------------------------------------------------------------

@mixin iphone6-plus($orientation: false) {
	$min: 414px;
	$max: 736px;
	$pixel-ratio: 3;

	@include mq(
			$min-device-width: $min,
			$max-device-width: $max,
			$orientation: $orientation,
			$-webkit-device-pixel-ratio: $pixel-ratio
	) {
		@content;
	}
}

// --- ipad (all) --------------------------------------------------------------

@mixin ipad($orientation: false) {
	$min: 768px;
	$max: 1024px;

	@include mq(
			$min-device-width: $min,
			$max-device-width: $max,
			$orientation: $orientation
	) {
		@content;
	}
}

// --- ipad-retina -------------------------------------------------------------

@mixin ipad-retina($orientation: false) {
	$min: 768px;
	$max: 1024px;
	$pixel-ratio: 2;

	@include mq(
			$min-device-width: $min,
			$max-device-width: $max,
			$orientation: $orientation,
			$-webkit-device-pixel-ratio: $pixel-ratio
	) {
		@content;
	}
}

// --- orientation -------------------------------------------------------------

@mixin landscape() {
	@include mq($orientation: landscape) {
		@content;
	}
}

@mixin portrait() {
	@include mq($orientation: portrait) {
		@content;
	}
}


// =====================================================================================================================
// *** BOX SHADOW ***
// =====================================================================================================================
@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
	@if $inset {
		-webkit-box-shadow:inset $top $left $blur $color;
		-moz-box-shadow:inset $top $left $blur $color;
		box-shadow:inset $top $left $blur $color;
	} @else {
		-webkit-box-shadow: $top $left $blur $color;
		-moz-box-shadow: $top $left $blur $color;
		box-shadow: $top $left $blur $color;
	}
}


// =====================================================================================================================
// *** FLEXBOX ***
// =====================================================================================================================
// --------------------------------------------------
// Flexbox SASS mixins
// The spec: http://www.w3.org/TR/css3-flexbox
// --------------------------------------------------

// Flexbox display
@mixin flexbox() {
	display: -webkit-box;
	display: -moz-box;
	display: -ms-flexbox;
	display: -webkit-flex;
	display: flex;
}

// The 'flex' shorthand
// - applies to: flex items
// <positive-number>, initial, auto, or none
@mixin flex($values) {
	-webkit-box-flex: $values;
	-moz-box-flex: $values;
	-webkit-flex: $values;
	-ms-flex: $values;
	flex: $values;
}

// Flex Flow Direction
// - applies to: flex containers
// row | row-reverse | column | column-reverse
@mixin flex-direction($direction) {
	-webkit-flex-direction: $direction;
	-moz-flex-direction: $direction;
	-ms-flex-direction: $direction;
	flex-direction: $direction;
}

// Flex Line Wrapping
// - applies to: flex containers
// nowrap | wrap | wrap-reverse
@mixin flex-wrap($wrap) {
	-webkit-flex-wrap: $wrap;
	-moz-flex-wrap: $wrap;
	-ms-flex-wrap: $wrap;
	flex-wrap: $wrap;
}

// Flex Direction and Wrap
// - applies to: flex containers
// <flex-direction> || <flex-wrap>
@mixin flex-flow($flow) {
	-webkit-flex-flow: $flow;
	-moz-flex-flow: $flow;
	-ms-flex-flow: $flow;
	flex-flow: $flow;
}

// Display Order
// - applies to: flex items
// <integer>
@mixin order($val) {
	-webkit-box-ordinal-group: $val;
	-moz-box-ordinal-group: $val;
	-ms-flex-order: $val;
	-webkit-order: $val;
	order: $val;
}

// Flex grow factor
// - applies to: flex items
// <number>
@mixin flex-grow($grow) {
	-webkit-flex-grow: $grow;
	-moz-flex-grow: $grow;
	-ms-flex-grow: $grow;
	flex-grow: $grow;
}

// Flex shrink
// - applies to: flex item shrink factor
// <number>
@mixin flex-shrink($shrink) {
	-webkit-flex-shrink: $shrink;
	-moz-flex-shrink: $shrink;
	-ms-flex-shrink: $shrink;
	flex-shrink: $shrink;
}

// Flex basis
// - the initial main size of the flex item
// - applies to: flex itemsnitial main size of the flex item
// <width>
@mixin flex-basis($width) {
	-webkit-flex-basis: $width;
	-moz-flex-basis: $width;
	-ms-flex-basis: $width;
	flex-basis: $width;
}

// Axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | space-between | space-around
@mixin justify-content($justify) {
	-webkit-justify-content: $justify;
	-moz-justify-content: $justify;
	-ms-justify-content: $justify;
	justify-content: $justify;
	-ms-flex-pack: $justify;
}

// Packing Flex Lines
// - applies to: multi-line flex containers
// flex-start | flex-end | center | space-between | space-around | stretch
@mixin align-content($align) {
	-webkit-align-content: $align;
	-moz-align-content: $align;
	-ms-align-content: $align;
	align-content: $align;
}

// Cross-axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | baseline | stretch
@mixin align-items($align) {
	-webkit-align-items: $align;
	-moz-align-items: $align;
	-ms-align-items: $align;
	align-items: $align;
}

// Cross-axis Alignment
// - applies to: flex items
// auto | flex-start | flex-end | center | baseline | stretch
@mixin align-self($align) {
	-webkit-align-self: $align;
	-moz-align-self: $align;
	-ms-align-self: $align;
	align-self: $align;
}
